// Filename: 		radio_bridge.mheg+
// Comments:	   	Radio bridge with DAB text updates,
//					SID Now and Next fields, and links to
//					Radio IPS content, and BBCi links.

import (radio.h.mheg+)

{:IntegerConst NumMenuItems :ConstValue 7 }
{:IntegerConst MenuStartY   :ConstValue [Y_RecSid + Y_0] } // 178

import (radio-menu.h.mheg+)

defMacro zeroShowPressedBespokeCode {
		app#propertyImage.Run() //Fix CanalPlus Dirty Rectangle Bug
} endMacro

// Default radio bridge scene
{:Scene '/s/radio_bridge.mhg'

// Note: According to MHEG Player, when you press SELECT to go to the next
// screen, the screen is left locked.  This is because the screen is locked by
// lnkSelectPressed and again by :OnCloseDown, but only unlocked once in the
// new scene.  This behaviour is not seen on real boxes, though, so I'm not
// changing the code.  I don't know why there is such a discrepancy.

  :OnCloseDown
  (
		app#tgParser.CallActionSlot (performScreenLock)
  )

  :Items
  (
	//BEHAVIOUR

	{:Timer tmrFileRefreshOrMoveText }

	// Scene entered
	{:Link lnkIsRunning
		:EventSource		0
		:EventType			IsRunning
		:LinkEffect (
			lnkIsRunning.Deactivate()
			app#txtAutoUpdate.Run()
			app#txtAutoUpdate.Stop()

			//Set Livetext to current string (if already set) i.e. for return from any other scene
			txtLIVE.SetData (:IndirectRef ('/a' AppStrLiveCurrent))

			strNowCurrent.SetVariable (:IndirectRef ('/a' AppStrNowCurrent))
			lnkExtractNowNext.Activate()

			//Make the Live text acquire immediately
			0.SetTimer (tmrFileRefreshOrMoveText 0)
		)
	}

	//Initialise scene
	{:Link lnkInitialiseScene
		:EventSource		app#txtAutoUpdate
		:EventType		IsRunning
		:LinkEffect
		(
			//Set the SID Now text
			//app#strLineStart.SetVariable ("@Now|")
			//app#tgParser.CallActionSlot  (extractTag)
			//txtNow.SetData (:IndirectRef app#strExtractedString)

			//Set the SID Next text
			//app#strLineStart.SetVariable ("@Nxt|")
			//app#tgParser.CallActionSlot  (extractTag)
			//txtNext.SetData (:IndirectRef app#strExtractedString)

			insertMacro (commonRadioMenuRcParsingCode)

			app#tgParser.CallActionSlot (performScreenUnlock)
		)
	}

	{:TokenGroup tgStopUnusedItems
		:TokenGroupItems
		(
			(app#txtDummy // Need a visible object (which can be anything here)
				:actionslots
				(
					(
						foreach item (2..NumMenuItems) {
							txtSlot<item>.Stop()
							rctSlot<item>.Run()
						} endFor
					)
					(
						foreach item (3..NumMenuItems) {
							txtSlot<item>.Stop()
							rctSlot<item>.Run()
						} endFor
					)
					(
						foreach item (4..NumMenuItems) {
							txtSlot<item>.Stop()
							rctSlot<item>.Run()
						} endFor
					)
					(
						foreach item (5..NumMenuItems) {
							txtSlot<item>.Stop()
							rctSlot<item>.Run()
						} endFor
					)
					(
						txtSlot6.stop()
						txtSlot7.stop()

						rctSlot6.Run()
						rctSlot7.Run()
					)
					(
						txtSlot7.stop()

						rctSlot7.Run()
					)
				NULL
				)
			)
		)
	}

	// Attempt to reload the rc file
	{:Link lnkFileRefreshTimerFired
		:EventSource		0
		:EventType			TimerFired
		:EventData			tmrFileRefreshOrMoveText
		:LinkEffect
		(
			lnkReloadRC.Activate()
		)
	}

	{:Link lnkReloadRC :initiallyactive false
		:EventSource		lnkReloadRC
		:EventType			IsRunning
		:LinkEffect
		(
			lnkReloadRC.Deactivate()
			// Check for new content (happens in /a)
			app#lnkTrigger.Activate()
			//Set timer before calling for the file incase file is updated
			app#txtTrigger.Run() app#txtTrigger.Stop()

			0.SetTimer (tmrFileRefreshOrMoveText :IndirectRef intReload)
			//DEBUG0.SetTimer (tmrFileRefreshOrMoveText 15000)

			app#lnkQCContentAvail.Deactivate()
			lnkLiveTextAvailable.Activate()
			lnkCantLoadDlsFile.Activate()
			lnkNowTextAvailable.Activate()

			//This data will be displayed using the txtLive box
			:SetData(('/a' AppTxtLiveHolder) :NewRefContent ('/c/r_dls.rc'))
			txtNowHolder.SetData (:NewRefContent ('/c/r_sid_now.rc'))

			//Refresh the TIME & DAY
			lnkGetTime.Activate()
		)
	}


	// Perform the move
	{:Link lnkMoveInMenu
		:InitiallyActive		False
		:EventSource			lnkMoveInMenu
		:EventType			  IsRunning
		:LinkEffect
		(
			// Reposition the highlight bar
			strCol.SetVariable ('@M')
			strCast.SetVariable (:IndirectRef intCurItem)
			strCol.Append (:IndirectRef strCast)
			strCol.Append ('|')

			app#strLineStart.SetVariable (:IndirectRef strCol)
			app#tgParser.CallActionSlot (extractTag)
			txtHighlight.SetData (:IndirectRef app#strExtractedString)

			txtHighlight.SetPosition ([720 - X_Rec2] :IndirectRef intPosY)

			// Reposition the arrows background
			rctArrow.SetPosition ([720 - X_Rec2 - 16] :IndirectRef intPosY)
			bmpArrow.SetPosition ([720 - X_Rec2 - 16] :IndirectRef intPosY)
			lnkMoveInMenu.Deactivate()
			)
	}

	//ON-SCREEN ASSETS - Ordered for correct layering

	insertMacro (menuScreenAssets)

	//The SID Next text box
	{:Text txtNext
		:OrigContent		''
		:OrigBoxSize		228	Y_RecSid
		:OrigPosition		X_Txt			[7*Y_Rec +Y_RecSid + Y_0 + 24]
		:TextColour		'=D4=D4=D4=00'
		:BackgroundColour	transparent
		:TextWrapping		True
	}


//<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
//<>{: UPDATE SID NOW TEXT : Start
//<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

	{:Link lnkNowTextAvailable
		:InitiallyActive		False
		:EventSource			txtNowHolder
		:EventType			  ContentAvailable
		:LinkEffect
		(
				lnkNowTextAvailable.Deactivate()
				//Prepend the Foreground colour first
				strNowPending.SetVariable ('=1b=43=04')
				strNowPending.Append (:IndirectRef ('/a' AppStrForegroundColour))
				txtNowHolder.GetTextData (strTemp)
				strNowPending.Append (:IndirectRef strTemp)
				:If (strNowPending != :IndirectRef strNowCurrent) {
					strNowCurrent.SetVariable (:IndirectRef strNowPending)
					lnkExtractNowNext.Activate()

					//Hack to make the string persist across scenes
					:SetVariable (('/a' AppStrNowCurrent) :IndirectRef strNowCurrent)
				}
		)
	}

	{:Link lnkExtractNowNext
		:InitiallyActive		False
		:EventSource			lnkExtractNowNext
		:EventType			  IsRunning
		:LinkEffect
		(
			lnkExtractNowNext.Deactivate()
			app#prgSearchAndExtractSubString.Call (app#boolResult
				:IndirectRef strNowCurrent 	//Input string
				1 							//Input start index
				'|'							//Search term
				:IndirectRef strNowPending	//Result string
				:IndirectRef intSESIndex 	//Result index
			)
			//Update display immediately (markup colour is already prependded to this bit)
			txtNow.SetData (:IndirectRef strNowPending)

			//Extract the required line
			app#prgSearchAndExtractSubString.Call (app#boolResult
				:IndirectRef strNowCurrent 	//Input string
				:IndirectRef intSESIndex 	//Input start index
				'|'							//Search term
				:IndirectRef strNowPending	//Result string
				:IndirectRef intSESIndex 	//Result index
			)
			strTemp.SetVariable ('=1b=43=04')
			strTemp.Append (:IndirectRef ('/a' AppStrForegroundColour))
			strTemp.Append (:IndirectRef strNowPending)
			txtNext.SetData (:IndirectRef strTemp)
		)
	}

//<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>
//<>{: UPDATE SID NOW TEXT : End
//<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>

		{:OStringVar strTemp
			:OrigValue ''
		}

insertMacro (menuKeyLinks)
insertMacro (commonRadioMenuCode)
insertMacro (radioCommonCode)

 )//Close Items
 :InputEventReg 4
 :SceneCS 720 576
}
